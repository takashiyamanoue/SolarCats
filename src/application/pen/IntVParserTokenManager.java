package application.pen;
/* Generated By:JJTree&JavaCC: Do not edit this line. IntVParserTokenManager.java */
import java.util.Hashtable;

public class IntVParserTokenManager implements IntVParserConstants
{
        public int nLexicalErrors = 0;
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 30;
         return jjMoveNfa_0(0, 0);
      case 12:
         jjmatchedKind = 4;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 3;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(0, 0);
      case 40:
         jjmatchedKind = 28;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 29;
         return jjMoveNfa_0(0, 0);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 46:
         jjmatchedKind = 33;
         return jjMoveNfa_0(0, 0);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 91:
         jjmatchedKind = 26;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 27;
         return jjMoveNfa_0(0, 0);
      case 123:
         jjmatchedKind = 24;
         return jjMoveNfa_0(0, 0);
      case 124:
         jjmatchedKind = 5;
         return jjMoveNfa_0(0, 0);
      case 125:
         jjmatchedKind = 25;
         return jjMoveNfa_0(0, 0);
      case 12288:
         jjmatchedKind = 7;
         return jjMoveNfa_0(0, 0);
      case 12363:
         return jjMoveStringLiteralDfa1_0(0x40000000200000L, 0x0L);
      case 12378:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 12391:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 12392:
         jjmatchedKind = 32;
         return jjMoveNfa_0(0, 0);
      case 12414:
         return jjMoveStringLiteralDfa1_0(0x80000000400000L, 0x0L);
      case 12418:
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L);
      case 12434:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 23455:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 25163:
         return jjMoveStringLiteralDfa1_0(0x18000000000L, 0x0L);
      case 25972:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 25991:
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L);
      case 38306:
         return jjMoveStringLiteralDfa1_0(0x60000000000L, 0x0L);
      case 65372:
         jjmatchedKind = 6;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 12375:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
         }
         break;
      case 12383:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L);
      case 12388:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
         }
         break;
      case 12391:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 1;
         }
         break;
      case 12394:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L);
      case 12425:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
         }
         break;
      case 23383:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L, active1, 0L);
      case 25968:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L);
      case 32154:
         return jjMoveStringLiteralDfa2_0(active0, 0x18000000000L, active1, 0L);
      case 36820:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 70:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 2;
         }
         break;
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      case 12356:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
         }
         break;
      case 12365:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      case 12377:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         break;
      case 12399:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 2;
         }
         break;
      case 21015:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 2;
         }
         break;
      case 32066:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 76:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 3;
         }
         break;
      case 20102:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         break;
      case 32066:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 20102:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 4;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x800L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec1 = {
   0x2000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0x800000L
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x0L, 0x80000000000000L
};
static final long[] jjbitVec4 = {
   0x20L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0x10000L, 0x0L
};
static final long[] jjbitVec6 = {
   0x20000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x40000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x0L, 0x8000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x10000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec10 = {
   0x0L, 0x4000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec11 = {
   0x0L, 0x100000000L, 0x0L, 0x0L
};
static final long[] jjbitVec12 = {
   0x2L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec13 = {
   0x1000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x0L, 0x0L, 0x80000L, 0x0L
};
static final long[] jjbitVec15 = {
   0x0L, 0x400000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec16 = {
   0x0L, 0x0L, 0x80000000L, 0x0L
};
static final long[] jjbitVec17 = {
   0x0L, 0x0L, 0x800L, 0x0L
};
static final long[] jjbitVec18 = {
   0x0L, 0x2000000L, 0x0L, 0x0L
};
static final long[] jjbitVec19 = {
   0x0L, 0x1000L, 0x0L, 0x0L
};
static final long[] jjbitVec20 = {
   0x0L, 0x4000000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec21 = {
   0x0L, 0x40000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec22 = {
   0x0L, 0x80000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec23 = {
   0x0L, 0x800000L, 0x0L, 0x0L
};
static final long[] jjbitVec24 = {
   0x0L, 0x0L, 0x200L, 0x0L
};
static final long[] jjbitVec25 = {
   0x0L, 0x1000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec26 = {
   0x0L, 0x0L, 0x10L, 0x0L
};
static final long[] jjbitVec27 = {
   0x0L, 0x0L, 0x800000L, 0x0L
};
static final long[] jjbitVec28 = {
   0x8000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec29 = {
   0x0L, 0x1000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec30 = {
   0x0L, 0x0L, 0x0L, 0x100000L
};
static final long[] jjbitVec31 = {
   0x0L, 0x0L, 0x400L, 0x0L
};
static final long[] jjbitVec32 = {
   0x0L, 0x0L, 0x40000L, 0x0L
};
static final long[] jjbitVec33 = {
   0x80000000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec34 = {
   0x0L, 0x0L, 0x8000000L, 0x0L
};
static final long[] jjbitVec35 = {
   0x0L, 0x0L, 0x0L, 0x400000000000000L
};
static final long[] jjbitVec36 = {
   0x0L, 0x0L, 0x1000L, 0x0L
};
static final long[] jjbitVec37 = {
   0x0L, 0x20000L, 0x0L, 0x0L
};
static final long[] jjbitVec38 = {
   0x0L, 0x10L, 0x0L, 0x0L
};
static final long[] jjbitVec39 = {
   0x0L, 0x40L, 0x0L, 0x0L
};
static final long[] jjbitVec40 = {
   0x0L, 0x20000000L, 0x0L, 0x0L
};
static final long[] jjbitVec41 = {
   0x0L, 0x8000L, 0x0L, 0x0L
};
static final long[] jjbitVec42 = {
   0x200000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec43 = {
   0x200000000000000L, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 403;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 105)
                        kind = 105;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 34)
                  {
                     if (kind > 108)
                        kind = 108;
                  }
                  else if (curChar == 44)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 11;
                  else if (curChar == 61)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 6;
                  else if (curChar == 37)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  else if (curChar == 43)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  if (curChar == 60)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 16)
                        kind = 16;
                  }
                  break;
               case 1:
                  if (curChar == 45)
                     kind = 9;
                  break;
               case 2:
                  if (curChar == 42)
                     kind = 10;
                  break;
               case 3:
                  if (curChar == 47)
                     kind = 11;
                  break;
               case 4:
                  if (curChar == 37)
                     kind = 12;
                  break;
               case 6:
                  if (curChar == 61 && kind > 13)
                     kind = 13;
                  break;
               case 7:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 61 && kind > 15)
                     kind = 15;
                  break;
               case 9:
                  if (curChar == 62 && kind > 16)
                     kind = 16;
                  break;
               case 11:
                  if (curChar == 61 && kind > 17)
                     kind = 17;
                  break;
               case 12:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 60 && kind > 18)
                     kind = 18;
                  break;
               case 15:
                  if (curChar == 61 && kind > 19)
                     kind = 19;
                  break;
               case 16:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 18:
                  if (curChar == 61 && kind > 20)
                     kind = 20;
                  break;
               case 19:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 44 && kind > 31)
                     kind = 31;
                  break;
               case 22:
                  if (curChar == 44 && kind > 49)
                     kind = 49;
                  break;
               case 36:
                  if (curChar == 44 && kind > 57)
                     kind = 57;
                  break;
               case 45:
                  if (curChar == 44 && kind > 58)
                     kind = 58;
                  break;
               case 53:
                  if (curChar == 40 && kind > 66)
                     kind = 66;
                  break;
               case 57:
                  if (curChar == 40 && kind > 71)
                     kind = 71;
                  break;
               case 61:
                  if (curChar == 40 && kind > 78)
                     kind = 78;
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 70:
                  if (curChar == 34)
                     kind = 108;
                  break;
               case 73:
                  if (curChar == 44 && kind > 50)
                     kind = 50;
                  break;
               case 82:
                  if (curChar == 44 && kind > 51)
                     kind = 51;
                  break;
               case 101:
                  if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 118:
                  if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 145:
                  if (curChar == 40 && kind > 62)
                     kind = 62;
                  break;
               case 150:
                  if (curChar == 40 && kind > 72)
                     kind = 72;
                  break;
               case 153:
                  if (curChar == 40 && kind > 76)
                     kind = 76;
                  break;
               case 159:
                  if (curChar == 40 && kind > 100)
                     kind = 100;
                  break;
               case 166:
                  if (curChar == 40 && kind > 63)
                     kind = 63;
                  break;
               case 172:
                  if (curChar == 40 && kind > 70)
                     kind = 70;
                  break;
               case 177:
                  if (curChar == 40 && kind > 77)
                     kind = 77;
                  break;
               case 184:
                  if (curChar == 40 && kind > 101)
                     kind = 101;
                  break;
               case 190:
                  if (curChar == 40 && kind > 102)
                     kind = 102;
                  break;
               case 197:
                  if (curChar == 40 && kind > 64)
                     kind = 64;
                  break;
               case 200:
                  if (curChar == 40 && kind > 67)
                     kind = 67;
                  break;
               case 204:
                  if (curChar == 40 && kind > 75)
                     kind = 75;
                  break;
               case 214:
                  if (curChar == 40 && kind > 65)
                     kind = 65;
                  break;
               case 217:
                  if (curChar == 40 && kind > 69)
                     kind = 69;
                  break;
               case 221:
                  if (curChar == 40 && kind > 94)
                     kind = 94;
                  break;
               case 227:
                  if (curChar == 40 && kind > 68)
                     kind = 68;
                  break;
               case 232:
                  if (curChar == 40 && kind > 99)
                     kind = 99;
                  break;
               case 238:
                  if (curChar == 40 && kind > 73)
                     kind = 73;
                  break;
               case 241:
                  if (curChar == 40 && kind > 74)
                     kind = 74;
                  break;
               case 248:
                  if (curChar == 40 && kind > 79)
                     kind = 79;
                  break;
               case 259:
                  if (curChar == 40 && kind > 80)
                     kind = 80;
                  break;
               case 271:
                  if (curChar == 40 && kind > 81)
                     kind = 81;
                  break;
               case 277:
                  if (curChar == 40 && kind > 82)
                     kind = 82;
                  break;
               case 286:
                  if (curChar == 40 && kind > 83)
                     kind = 83;
                  break;
               case 296:
                  if (curChar == 40 && kind > 84)
                     kind = 84;
                  break;
               case 305:
                  if (curChar == 40 && kind > 85)
                     kind = 85;
                  break;
               case 315:
                  if (curChar == 40 && kind > 86)
                     kind = 86;
                  break;
               case 324:
                  if (curChar == 40 && kind > 87)
                     kind = 87;
                  break;
               case 332:
                  if (curChar == 40 && kind > 88)
                     kind = 88;
                  break;
               case 340:
                  if (curChar == 40 && kind > 89)
                     kind = 89;
                  break;
               case 348:
                  if (curChar == 40 && kind > 90)
                     kind = 90;
                  break;
               case 356:
                  if (curChar == 40 && kind > 95)
                     kind = 95;
                  break;
               case 362:
                  if (curChar == 40 && kind > 96)
                     kind = 96;
                  break;
               case 370:
                  if (curChar == 40 && kind > 91)
                     kind = 91;
                  break;
               case 375:
                  if (curChar == 40 && kind > 92)
                     kind = 92;
                  break;
               case 380:
                  if (curChar == 40 && kind > 93)
                     kind = 93;
                  break;
               case 386:
                  if (curChar == 40 && kind > 97)
                     kind = 97;
                  break;
               case 392:
                  if (curChar == 40 && kind > 98)
                     kind = 98;
                  break;
               case 398:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAddStates(0, 2);
                  break;
               case 399:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAdd(399);
                  break;
               case 400:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(400, 401);
                  break;
               case 401:
                  if (curChar == 46)
                     jjCheckNAdd(402);
                  break;
               case 402:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAdd(402);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAdd(69);
                  }
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(3, 4);
                  else if ((0x800000008000L & l) != 0L)
                     jjAddStates(5, 7);
                  else if ((0x8000000080L & l) != 0L)
                     jjAddStates(8, 21);
                  else if ((0x100000001000L & l) != 0L)
                     jjAddStates(22, 23);
                  else if ((0x4000000040L & l) != 0L)
                     jjAddStates(24, 25);
                  else if ((0x800000008L & l) != 0L)
                     jjAddStates(26, 28);
                  else if ((0x8000000080000L & l) != 0L)
                     jjAddStates(29, 31);
                  else if ((0x4000000040000L & l) != 0L)
                     jjAddStates(32, 36);
                  else if ((0x20000000200L & l) != 0L)
                     jjAddStates(37, 40);
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 52:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 54:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 55:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 58:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 59:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 60:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 62:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 63:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
               case 69:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(69);
                  break;
               case 143:
                  if ((0x20000000200L & l) != 0L)
                     jjAddStates(37, 40);
                  break;
               case 144:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 145;
                  break;
               case 146:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 147:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 151:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 152:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 154:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 155:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 154;
                  break;
               case 156:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 160:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 161:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 160;
                  break;
               case 162:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 161;
                  break;
               case 163:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 164:
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(32, 36);
                  break;
               case 165:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 167:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 168:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 167;
                  break;
               case 169:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 173:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 171;
                  break;
               case 174:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 178:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 179:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 182:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 183:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 185:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 186:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 188:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 187;
                  break;
               case 189:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 190;
                  break;
               case 191:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               case 192:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 193:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 192;
                  break;
               case 194:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 193;
                  break;
               case 195:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(29, 31);
                  break;
               case 196:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 198:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 199:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 201:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 202:
                  if ((0x2000000020000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 203:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 205:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 203;
                  break;
               case 206:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 205;
                  break;
               case 207:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 209:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 208;
                  break;
               case 210:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 211:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 210;
                  break;
               case 212:
                  if ((0x800000008L & l) != 0L)
                     jjAddStates(26, 28);
                  break;
               case 213:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 214;
                  break;
               case 215:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 213;
                  break;
               case 216:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 218:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 219:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 220:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 222:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 220;
                  break;
               case 223:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 224:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 223;
                  break;
               case 225:
                  if ((0x4000000040L & l) != 0L)
                     jjAddStates(24, 25);
                  break;
               case 226:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 228:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 229:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 228;
                  break;
               case 230:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 229;
                  break;
               case 231:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 232;
                  break;
               case 233:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 231;
                  break;
               case 234:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 235:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 236:
                  if ((0x100000001000L & l) != 0L)
                     jjAddStates(22, 23);
                  break;
               case 237:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 239:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 237;
                  break;
               case 240:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 242:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 243:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 244:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 245:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 246:
                  if ((0x8000000080L & l) != 0L)
                     jjAddStates(8, 21);
                  break;
               case 247:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 248;
                  break;
               case 249:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 247;
                  break;
               case 250:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 249;
                  break;
               case 251:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 250;
                  break;
               case 252:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 251;
                  break;
               case 253:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 252;
                  break;
               case 254:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 253;
                  break;
               case 255:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 254;
                  break;
               case 256:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 255;
                  break;
               case 257:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 256;
                  break;
               case 258:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 259;
                  break;
               case 260:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 258;
                  break;
               case 261:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 260;
                  break;
               case 262:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 261;
                  break;
               case 263:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 262;
                  break;
               case 264:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 263;
                  break;
               case 265:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 264;
                  break;
               case 266:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 265;
                  break;
               case 267:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 266;
                  break;
               case 268:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 267;
                  break;
               case 269:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 268;
                  break;
               case 270:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 271;
                  break;
               case 272:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 270;
                  break;
               case 273:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 272;
                  break;
               case 274:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 273;
                  break;
               case 275:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 274;
                  break;
               case 276:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 277;
                  break;
               case 278:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 276;
                  break;
               case 279:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 278;
                  break;
               case 280:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 279;
                  break;
               case 281:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 280;
                  break;
               case 282:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 281;
                  break;
               case 283:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 282;
                  break;
               case 284:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 283;
                  break;
               case 285:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 286;
                  break;
               case 287:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 285;
                  break;
               case 288:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 287;
                  break;
               case 289:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 288;
                  break;
               case 290:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 289;
                  break;
               case 291:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 290;
                  break;
               case 292:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 291;
                  break;
               case 293:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 292;
                  break;
               case 294:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 293;
                  break;
               case 295:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 296;
                  break;
               case 297:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 295;
                  break;
               case 298:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 297;
                  break;
               case 299:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 298;
                  break;
               case 300:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 299;
                  break;
               case 301:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 300;
                  break;
               case 302:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 301;
                  break;
               case 303:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 302;
                  break;
               case 304:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 305;
                  break;
               case 306:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 304;
                  break;
               case 307:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 306;
                  break;
               case 308:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 307;
                  break;
               case 309:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 308;
                  break;
               case 310:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 309;
                  break;
               case 311:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 310;
                  break;
               case 312:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 311;
                  break;
               case 313:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 312;
                  break;
               case 314:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 315;
                  break;
               case 316:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 314;
                  break;
               case 317:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 316;
                  break;
               case 318:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 317;
                  break;
               case 319:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 318;
                  break;
               case 320:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 319;
                  break;
               case 321:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 320;
                  break;
               case 322:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 321;
                  break;
               case 323:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 324;
                  break;
               case 325:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 323;
                  break;
               case 326:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 325;
                  break;
               case 327:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 326;
                  break;
               case 328:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 327;
                  break;
               case 329:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 328;
                  break;
               case 330:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 329;
                  break;
               case 331:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 332;
                  break;
               case 333:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 331;
                  break;
               case 334:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 333;
                  break;
               case 335:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 334;
                  break;
               case 336:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 335;
                  break;
               case 337:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 336;
                  break;
               case 338:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 337;
                  break;
               case 339:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 340;
                  break;
               case 341:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 339;
                  break;
               case 342:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 341;
                  break;
               case 343:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 342;
                  break;
               case 344:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 343;
                  break;
               case 345:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 344;
                  break;
               case 346:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 345;
                  break;
               case 347:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 348;
                  break;
               case 349:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 347;
                  break;
               case 350:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 349;
                  break;
               case 351:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 350;
                  break;
               case 352:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 351;
                  break;
               case 353:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 352;
                  break;
               case 354:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 353;
                  break;
               case 355:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 356;
                  break;
               case 357:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 355;
                  break;
               case 358:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 357;
                  break;
               case 359:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 358;
                  break;
               case 360:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 359;
                  break;
               case 361:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 362;
                  break;
               case 363:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 361;
                  break;
               case 364:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 363;
                  break;
               case 365:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 364;
                  break;
               case 366:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 365;
                  break;
               case 367:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 366;
                  break;
               case 368:
                  if ((0x800000008000L & l) != 0L)
                     jjAddStates(5, 7);
                  break;
               case 369:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 370;
                  break;
               case 371:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 369;
                  break;
               case 372:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 371;
                  break;
               case 373:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 372;
                  break;
               case 374:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 375;
                  break;
               case 376:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 374;
                  break;
               case 377:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 376;
                  break;
               case 378:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 377;
                  break;
               case 379:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 380;
                  break;
               case 381:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 379;
                  break;
               case 382:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 381;
                  break;
               case 383:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 382;
                  break;
               case 384:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(3, 4);
                  break;
               case 385:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 386;
                  break;
               case 387:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 385;
                  break;
               case 388:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 387;
                  break;
               case 389:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 388;
                  break;
               case 390:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 389;
                  break;
               case 391:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 392;
                  break;
               case 393:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 391;
                  break;
               case 394:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 393;
                  break;
               case 395:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 394;
                  break;
               case 396:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 395;
                  break;
               case 397:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 396;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 9)
                        kind = 9;
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 16)
                        kind = 16;
                  }
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 17)
                        kind = 17;
                  }
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 21;
                  if (jjCanMove_22(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 32;
                  if (jjCanMove_28(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 41;
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 50;
                  if (jjCanMove_30(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 108)
                        kind = 108;
                  }
                  if (jjCanMove_31(hiByte, i1, i2, l1, l2))
                     jjAddStates(41, 42);
                  if (jjCanMove_21(hiByte, i1, i2, l1, l2))
                     jjAddStates(43, 44);
                  if (jjCanMove_35(hiByte, i1, i2, l1, l2))
                     jjAddStates(45, 49);
                  if (jjCanMove_35(hiByte, i1, i2, l1, l2))
                     jjAddStates(50, 52);
                  break;
               case 1:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 9)
                     kind = 9;
                  break;
               case 2:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 10)
                     kind = 10;
                  break;
               case 3:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2) && kind > 11)
                     kind = 11;
                  break;
               case 4:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2) && kind > 12)
                     kind = 12;
                  break;
               case 5:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2) && kind > 13)
                     kind = 13;
                  break;
               case 8:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2) && kind > 15)
                     kind = 15;
                  break;
               case 9:
                  if (jjCanMove_7(hiByte, i1, i2, l1, l2) && kind > 16)
                     kind = 16;
                  break;
               case 10:
                  if (jjCanMove_8(hiByte, i1, i2, l1, l2) && kind > 17)
                     kind = 17;
                  break;
               case 13:
                  if (jjCanMove_9(hiByte, i1, i2, l1, l2) && kind > 18)
                     kind = 18;
                  break;
               case 14:
                  if (jjCanMove_10(hiByte, i1, i2, l1, l2) && kind > 19)
                     kind = 19;
                  break;
               case 17:
                  if (jjCanMove_11(hiByte, i1, i2, l1, l2) && kind > 20)
                     kind = 20;
                  break;
               case 20:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2) && kind > 31)
                     kind = 31;
                  break;
               case 21:
                  if (jjCanMove_13(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2) && kind > 49)
                     kind = 49;
                  break;
               case 23:
                  if (jjCanMove_14(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 24:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     jjAddStates(53, 54);
                  break;
               case 26:
                  if (jjCanMove_17(hiByte, i1, i2, l1, l2) && kind > 52)
                     kind = 52;
                  break;
               case 27:
                  if (jjCanMove_18(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (jjCanMove_19(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (jjCanMove_19(hiByte, i1, i2, l1, l2) && kind > 52)
                     kind = 52;
                  break;
               case 30:
                  if (jjCanMove_20(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 31:
                  if (jjCanMove_17(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (jjCanMove_21(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (jjCanMove_22(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (jjCanMove_23(hiByte, i1, i2, l1, l2))
                     jjAddStates(55, 56);
                  break;
               case 35:
                  if (jjCanMove_24(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2) && kind > 57)
                     kind = 57;
                  break;
               case 37:
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 38:
                  if (jjCanMove_21(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (jjCanMove_26(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(36);
                  break;
               case 40:
                  if (jjCanMove_26(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (jjCanMove_27(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 42:
                  if (jjCanMove_28(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (jjCanMove_23(hiByte, i1, i2, l1, l2))
                     jjAddStates(57, 58);
                  break;
               case 44:
                  if (jjCanMove_24(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2) && kind > 58)
                     kind = 58;
                  break;
               case 46:
                  if (jjCanMove_25(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 47:
                  if (jjCanMove_21(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (jjCanMove_26(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(45);
                  break;
               case 49:
                  if (jjCanMove_26(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (jjCanMove_24(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 51:
                  if (jjCanMove_29(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 70:
                  if (jjCanMove_30(hiByte, i1, i2, l1, l2) && kind > 108)
                     kind = 108;
                  break;
               case 71:
                  if (jjCanMove_31(hiByte, i1, i2, l1, l2))
                     jjAddStates(41, 42);
                  break;
               case 72:
                  if (jjCanMove_23(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2) && kind > 50)
                     kind = 50;
                  break;
               case 74:
               case 76:
                  if (jjCanMove_32(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(72);
                  break;
               case 75:
                  if (jjCanMove_33(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 77:
                  if (jjCanMove_21(hiByte, i1, i2, l1, l2))
                     jjAddStates(43, 44);
                  break;
               case 78:
                  if (jjCanMove_34(hiByte, i1, i2, l1, l2) && kind > 46)
                     kind = 46;
                  break;
               case 79:
                  if (jjCanMove_24(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (jjCanMove_24(hiByte, i1, i2, l1, l2) && kind > 46)
                     kind = 46;
                  break;
               case 81:
                  if (jjCanMove_35(hiByte, i1, i2, l1, l2))
                     jjAddStates(45, 49);
                  break;
               case 82:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2) && kind > 51)
                     kind = 51;
                  break;
               case 83:
                  if (jjCanMove_36(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(85);
                  break;
               case 84:
                  if (jjCanMove_17(hiByte, i1, i2, l1, l2) && kind > 60)
                     kind = 60;
                  break;
               case 85:
                  if (jjCanMove_18(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (jjCanMove_37(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 87:
                  if (jjCanMove_38(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(85);
                  break;
               case 88:
                  if (jjCanMove_39(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (jjCanMove_31(hiByte, i1, i2, l1, l2))
                     jjAddStates(59, 60);
                  break;
               case 90:
                  if (jjCanMove_18(hiByte, i1, i2, l1, l2) && kind > 59)
                     kind = 59;
                  break;
               case 91:
               case 93:
                  if (jjCanMove_32(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(90);
                  break;
               case 92:
                  if (jjCanMove_33(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 94:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     jjAddStates(61, 62);
                  break;
               case 95:
                  if (jjCanMove_17(hiByte, i1, i2, l1, l2) && kind > 45)
                     kind = 45;
                  break;
               case 96:
                  if (jjCanMove_18(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (jjCanMove_19(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (jjCanMove_19(hiByte, i1, i2, l1, l2) && kind > 45)
                     kind = 45;
                  break;
               case 99:
                  if (jjCanMove_35(hiByte, i1, i2, l1, l2))
                     jjAddStates(50, 52);
                  break;
               case 100:
                  if (jjCanMove_23(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 101:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 102:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 103:
                  if (jjCanMove_21(hiByte, i1, i2, l1, l2))
                     jjAddStates(63, 65);
                  break;
               case 104:
                  if (jjCanMove_34(hiByte, i1, i2, l1, l2) && kind > 47)
                     kind = 47;
                  break;
               case 105:
                  if (jjCanMove_40(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(104);
                  break;
               case 106:
                  if (jjCanMove_41(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (jjCanMove_24(hiByte, i1, i2, l1, l2) && kind > 47)
                     kind = 47;
                  break;
               case 108:
                  if (jjCanMove_21(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (jjCanMove_42(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 110:
                  if (jjCanMove_24(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(104);
                  break;
               case 111:
                  if (jjCanMove_21(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (jjCanMove_42(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (jjCanMove_43(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 114:
                  if (jjCanMove_44(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if (jjCanMove_19(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 116:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (jjCanMove_23(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if (jjCanMove_12(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 119:
                  if (jjCanMove_44(hiByte, i1, i2, l1, l2))
                     jjAddStates(66, 67);
                  break;
               case 120:
                  if (jjCanMove_45(hiByte, i1, i2, l1, l2) && kind > 48)
                     kind = 48;
                  break;
               case 121:
                  if (jjCanMove_21(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (jjCanMove_43(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (jjCanMove_46(hiByte, i1, i2, l1, l2) && kind > 48)
                     kind = 48;
                  break;
               case 125:
                  if (jjCanMove_45(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (jjCanMove_21(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 128:
                  if (jjCanMove_43(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
                  if (jjCanMove_19(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 130:
                  if (jjCanMove_16(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (jjCanMove_19(hiByte, i1, i2, l1, l2))
                     jjAddStates(68, 69);
                  break;
               case 132:
                  if (jjCanMove_23(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 133:
                  if (jjCanMove_15(hiByte, i1, i2, l1, l2))
                     jjAddStates(70, 71);
                  break;
               case 134:
                  if (jjCanMove_36(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(136);
                  break;
               case 135:
                  if (jjCanMove_17(hiByte, i1, i2, l1, l2) && kind > 61)
                     kind = 61;
                  break;
               case 136:
                  if (jjCanMove_18(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 135;
                  break;
               case 137:
                  if (jjCanMove_37(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 138:
                  if (jjCanMove_38(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(136);
                  break;
               case 139:
                  if (jjCanMove_39(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (jjCanMove_21(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(132);
                  break;
               case 141:
                  if (jjCanMove_47(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(132);
                  break;
               case 142:
                  if (jjCanMove_48(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 403 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x800000000000L) != 0L)
            return 4;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 92:
         return jjMoveStringLiteralDfa1_1(0x800000000000L);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_1(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 110:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 111);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, 0L, active1);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 7;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  else if (curChar == 34)
                  {
                     if (kind > 109)
                        kind = 109;
                  }
                  break;
               case 4:
                  if (curChar == 34 && kind > 110)
                     kind = 110;
                  break;
               case 1:
                  if (curChar == 10)
                     kind = 109;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 92)
                     jjAddStates(72, 74);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_49(hiByte, i1, i2, l1, l2) && kind > 109)
                     kind = 109;
                  break;
               case 4:
                  if (jjCanMove_49(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 110)
                        kind = 110;
                  }
                  if (jjCanMove_30(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 110)
                        kind = 110;
                  }
                  break;
               case 5:
                  if (jjCanMove_49(hiByte, i1, i2, l1, l2) && kind > 110)
                     kind = 110;
                  break;
               case 6:
                  if (jjCanMove_30(hiByte, i1, i2, l1, l2) && kind > 110)
                     kind = 110;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 7 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x4000000000000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_2(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 114);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   399, 400, 401, 390, 397, 373, 378, 383, 257, 269, 275, 284, 294, 303, 313, 322, 
   330, 338, 346, 354, 360, 367, 239, 245, 230, 235, 215, 219, 224, 198, 202, 211, 
   170, 175, 182, 188, 194, 148, 151, 157, 163, 75, 76, 79, 80, 82, 86, 88, 
   89, 94, 116, 130, 142, 28, 29, 38, 40, 47, 49, 92, 93, 97, 98, 106, 
   109, 112, 123, 128, 140, 141, 137, 139, 4, 5, 6, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 255:
         return ((jjbitVec0[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 255:
         return ((jjbitVec1[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 255:
         return ((jjbitVec4[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 33:
         return ((jjbitVec5[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 255:
         return ((jjbitVec6[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_7(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 255:
         return ((jjbitVec7[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_8(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_9(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 255:
         return ((jjbitVec9[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_10(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec10[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_11(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 34:
         return ((jjbitVec11[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_12(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec13[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_13(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 149:
         return ((jjbitVec14[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_14(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec15[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_15(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_16(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 91:
         return ((jjbitVec16[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_17(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec17[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_18(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec18[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_19(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 136:
         return ((jjbitVec19[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_20(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec20[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_21(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec21[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_22(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec22[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_23(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec23[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_24(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec24[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_25(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec19[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_26(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec25[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_27(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec26[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_28(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 88:
         return ((jjbitVec27[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_29(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 110:
         return ((jjbitVec28[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_30(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec13[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_31(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 126:
         return ((jjbitVec29[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_32(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 143:
         return ((jjbitVec30[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_33(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec31[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_34(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec29[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_35(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec32[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_36(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 82:
         return ((jjbitVec33[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_37(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 83:
         return ((jjbitVec29[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_38(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 82:
         return ((jjbitVec34[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_39(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 81:
         return ((jjbitVec35[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_40(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec36[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_41(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec37[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_42(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec38[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_43(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec39[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_44(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec40[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_45(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec41[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_46(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec10[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_47(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 113:
         return ((jjbitVec42[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_48(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 101:
         return ((jjbitVec43[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_49(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec1[i2] & l2) != 0L);
      default : 
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\55\76", null, null, null, null, null, null, "\u304b\u3064", 
"\u307e\u305f\u306f", "\u3067\u306a\u3044", "\173", "\175", "\133", "\135", "\50", "\51", "\12", 
null, "\u3068", "\56", "\105\117\106", "\116\125\114\114", "\u6574\u6570", 
"\u5b9f\u6570", "\u6587\u5b57\u5217", "\u624b\u7d9a\u304d", "\u624b\u7d9a\u304d\u7d42\u4e86", 
"\u95a2\u6570", "\u95a2\u6570\u7d42\u4e86", "\u3092\u8fd4\u3059", "\u3082\u3057", null, null, 
null, null, null, null, null, null, "\u3092", "\u304b\u3089", "\u307e\u3067", 
"\u305a\u3064", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "STR", 
   "COMM", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, 2, 0, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffff01L, 0x2e7fffffffffL, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x14000000000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x4000000000000L, 
};
static final long[] jjtoMore = {
   0x0L, 0xbd00000000000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[403];
private final int[] jjstateSet = new int[806];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public IntVParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public IntVParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 403; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 116)
         {
            jjmatchedKind = 116;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 112)
         {
            jjmatchedKind = 112;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 115)
         {
            jjmatchedKind = 115;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 116 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                        ++nLexicalErrors;
                        new ConsoleAppend(
                                "### " + input_stream.getBeginLine() + "\u884c\u76ee\u3067"
                                + "\u30a8\u30e9\u30fc\u3067\u3059 : '" + image + "'\n"
                        );
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 110 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen)));
         jjimageLen = 0;
                        image.deleteCharAt(image.length() - 2);
         break;
      case 111 :
         if (image == null)
              image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen)));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen)));
         jjimageLen = 0;
                        image.delete(image.length() - 2, image.length());
                        image.append('\n');
         break;
      default : 
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 107 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                        int idx;
                        int len = image.length();
                        if (!Character.isJavaIdentifierStart(image.charAt(0))) {
                                ++nLexicalErrors;
                                new ConsoleAppend(
                                        "### " + matchedToken.beginLine + "\u884c\u76ee\u3067"
                                        + "\u30a8\u30e9\u30fc\u3067\u3059 : \""
                                        + matchedToken.image.charAt(0)
                                        + "\"("
                                        + Integer.toHexString(matchedToken.image.charAt(0))
                                        + ")\n"
                                );
                        }
                        for (idx = 1; idx < len; ++idx) {
                                if (!Character.isJavaIdentifierPart(image.charAt(idx))) {
                                        ++nLexicalErrors;
                                        new ConsoleAppend(
                                                "### " + matchedToken.beginLine + "\u884c\u76ee\u3067"
                                                + "\u30a8\u30e9\u30fc\u3067\u3059 : \""
                                                + matchedToken.image.charAt(idx)
                                                + "\"("
                                                + Integer.toHexString(matchedToken.image.charAt(idx))
                                                + ")\n"
                                        );
                                }
                        }
         break;
      case 109 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                        if ( (image.charAt(0) == '\"' && image.charAt(image.length()-1) == '\"') ||
                         (image.charAt(0) == '\u300c' && image.charAt(image.length()-1) == '\u300d') ){
                                matchedToken.image = image.substring(1, image.length()-1);
                        }else{
                                ++nLexicalErrors;
                                matchedToken.image = image.substring(1, image.length()-2);
                                new ConsoleAppend(
                                        "### " + matchedToken.beginLine + "\u884c\u76ee\u306e"
                                        + "\u51fa\u529b\u6587\u3067[\"] \u304b[ \u300d]\u3092\u5fd8\u308c\u3066\u3044\u307e\u305b\u3093\u304b\uff1f\n"
                                );
                        }
         break;
      default : 
         break;
   }
}
}
